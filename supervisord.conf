# ==========================================================================
# Archivo de Configuración para Supervisord
# Nombre de archivo esperado: supervisord.conf
# Ubicación dentro del contenedor (copiado por Dockerfile): /etc/supervisor/conf.d/supervisord.conf
# ==========================================================================
# Este archivo define los programas que supervisord debe iniciar y gestionar
# dentro del contenedor Docker único.

[supervisord]
nodaemon=true               ; Ejecuta supervisord en primer plano (requerido en Docker).
pidfile=/tmp/supervisord.pid ; Ubicación del archivo PID.
logfile=/dev/null           ; Log principal de supervisord (redirigido para evitar archivos innecesarios, los logs de programas van a stdout/stderr).
logfile_maxbytes=0          ; Sin límite para el log principal.

# --- Programa de inicialización de la Base de Datos ---
# Se ejecuta una sola vez al inicio para asegurar que el archivo .db existe y tiene permisos.
[program:db-init]
command=sh -c "mkdir -p /data && chmod 777 /data && touch /data/checktime.db && chmod 666 /data/checktime.db && echo '[db-init] Database file /data/checktime.db checked/created.'"
autostart=true              ; Iniciar automáticamente al arrancar supervisor.
autorestart=false             ; NO reiniciar si termina (solo necesita ejecutarse una vez).
startretries=0              ; No reintentar si falla la primera vez.
priority=1                  ; Prioridad alta para intentar que se ejecute antes que los servicios que la usan.
user=root                   ; Asegura permisos para crear/modificar archivos en /data (si es necesario).
stdout_logfile=/dev/stdout  ; Redirige la salida estándar a los logs de Docker.
stdout_logfile_maxbytes=0   ; Sin límite de tamaño para logs de stdout.
stderr_logfile=/dev/stderr  ; Redirige la salida de error a los logs de Docker.
stderr_logfile_maxbytes=0   ; Sin límite de tamaño para logs de stderr.

# --- Programa del Servidor Web ---
[program:web]
command=python -m src.checktime.web.server ; Comando para iniciar el servidor web.
directory=/app              ; Directorio de trabajo para el comando.
autostart=true              ; Iniciar automáticamente.
autorestart=true             ; Reiniciar automáticamente si el proceso falla.
priority=10                 ; Prioridad estándar para servicios.
user=root                   ; Ejecutar como root (o el usuario que corresponda si creaste uno específico).
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
# La línea 'environment' se simplifica. Las variables del .env (DATABASE_URL, *_TOKEN, etc.)
# son inyectadas por docker-compose en el contenedor y heredadas por este proceso.
# Solo definimos explícitamente si es necesario sobrescribir o asegurar alguna.
environment=PYTHONPATH="/app"

# --- Programa del Bot Listener ---
[program:bot]
command=python -m src.checktime.bot.listener ; Comando para iniciar el listener del bot.
directory=/app
autostart=true
autorestart=true
priority=10
user=root
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
# Hereda las variables de entorno (DATABASE_URL, *_TOKEN, etc.) del contenedor.
environment=PYTHONPATH="/app"

# --- Programa del Servicio de Fichaje ---
[program:fichar]
command=python -m src.checktime.fichaje.service ; Comando para iniciar el servicio de fichaje.
directory=/app
autostart=true
autorestart=true
priority=10
user=root
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0
# Hereda las variables de entorno (DATABASE_URL, CHECKJC_*, etc.) del contenedor.
environment=PYTHONPATH="/app"